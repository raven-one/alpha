name: Deploy (ACA + MySQL) â€” CLI path

on:
  workflow_dispatch:
    inputs:
      rg:
        description: 'Resource Group'
        required: true
        default: 'mead-rg'
      location:
        description: 'Azure region'
        required: true
        default: 'northeurope'
      imageRef:
        description: 'Public image (e.g. avenr/aca-nginx-php:mead-sql)'
        required: true
        default: 'avenr/aca-nginx-php:mead-sql'
      stopMysql:
        description: 'Stop MySQL after deploy (save cost)'
        required: true
        default: 'false'
      cleanup:
        description: 'Delete the whole RG after deploy (DANGEROUS)'
        required: true
        default: 'false'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure latest Azure CLI + extensions
        run: |
          az upgrade --yes
          az extension add --upgrade -n containerapp || az extension update -n containerapp

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Register resource providers (App, MySQL, Log Analytics)
        run: |
          set -e
          for NS in Microsoft.App Microsoft.DBforMySQL Microsoft.OperationalInsights; do
            az provider register --namespace $NS --wait
          done

      - name: Ensure Resource Group
        run: az group create -n ${{ github.event.inputs.rg }} -l ${{ github.event.inputs.location }} --only-show-errors -o none

      # --- Log Analytics (needed by Container Apps env) ---
      - name: Create Log Analytics (for Container Apps env)
        id: la
        env:
          RG:  ${{ github.event.inputs.rg }}
          LOC: ${{ github.event.inputs.location }}
        run: |
          set -e
          LA="${RG}-law"
          if ! az monitor log-analytics workspace show -g "$RG" -n "$LA" -o none 2>/dev/null; then
            az monitor log-analytics workspace create \
              -g "$RG" -n "$LA" -l "$LOC" \
              --sku PerGB2018 \
              --retention-time 30 \
              --only-show-errors -o none
          fi
          for i in {1..10}; do
            LA_ID=$(az monitor log-analytics workspace show -g "$RG" -n "$LA" --query customerId -o tsv) && \
            LA_KEY=$(az monitor log-analytics workspace get-shared-keys -g "$RG" -n "$LA" --query primarySharedKey -o tsv) && \
            break || sleep 10
          done
          if [ -z "$LA_ID" ] || [ -z "$LA_KEY" ]; then
            echo "Failed to obtain Log Analytics keys"; exit 1
          fi
          echo "LA_ID=$LA_ID"   >> $GITHUB_OUTPUT
          echo "LA_KEY=$LA_KEY" >> $GITHUB_OUTPUT

      # --- MySQL Flexible Server (cheap B1ms + 20GB) ---
      - name: Create MySQL Flexible Server (+ DB + firewall)
        id: mysql
        env:
          RG:  ${{ github.event.inputs.rg }}
          LOC: ${{ github.event.inputs.location }}
          DBU: ${{ secrets.DB_ADMIN_USER }}
          DBP: ${{ secrets.DB_ADMIN_PASSWORD }}
        run: |
          set -e
          MYSQL="mead-mysql"
          DBNAME="contactforms"

          if ! az mysql flexible-server show -g "$RG" -n "$MYSQL" -o none 2>/dev/null; then
            az mysql flexible-server create \
              -g "$RG" -n "$MYSQL" -l "$LOC" \
              --admin-user "$DBU" --admin-password "$DBP" \
              --sku-name Standard_B1ms --storage-size 20 --version 8.0.21 \
              --public-access 0.0.0.0-255.255.255.255 \
              --only-show-errors -o none
          fi

          # Ensure DB exists (idempotent)
          az mysql flexible-server db create -g "$RG" -s "$MYSQL" -d "$DBNAME" --only-show-errors -o none || true

          MYSQL_FQDN=$(az mysql flexible-server show -g "$RG" -n "$MYSQL" --query fullyQualifiedDomainName -o tsv)
          echo "MYSQL_FQDN=$MYSQL_FQDN" >> $GITHUB_OUTPUT

      # --- Container Apps Environment + App (0.5 vCPU / 1Gi, scale to zero) ---
      - name: Create Container Apps Environment
        env:
          RG:   ${{ github.event.inputs.rg }}
          LOC:  ${{ github.event.inputs.location }}
          LA_ID:  ${{ steps.la.outputs.LA_ID }}
          LA_KEY: ${{ steps.la.outputs.LA_KEY }}
        run: |
          set -e
          ENV="mead-env"
          if ! az containerapp env show -g "$RG" -n "$ENV" -o none 2>/dev/null; then
            az containerapp env create \
              -g "$RG" -n "$ENV" -l "$LOC" \
              --logs-workspace-id "$LA_ID" \
              --logs-workspace-key "$LA_KEY" \
              --only-show-errors -o none
          fi

      - name: Create/Update Container App
        env:
          RG:   ${{ github.event.inputs.rg }}
          IMG:  ${{ github.event.inputs.imageRef }}
          DBU:  ${{ secrets.DB_ADMIN_USER }}
          DBP:  ${{ secrets.DB_ADMIN_PASSWORD }}
          DBH:  ${{ steps.mysql.outputs.MYSQL_FQDN }}
        run: |
          set -e
          APP="mead-app"
          ENV="mead-env"
          if ! az containerapp show -g "$RG" -n "$APP" -o none 2>/dev/null; then
            az containerapp create \
              -g "$RG" -n "$APP" \
              --environment "$ENV" \
              --image "$IMG" \
              --ingress external --target-port 80 \
              --secrets db-pass="$DBP" \
              --env-vars DB_HOST="$DBH" DB_PORT=3306 DB_NAME=contactforms DB_USER="$DBU" DB_PASS=secretref:db-pass \
              --cpu 0.5 --memory 1Gi \
              --min-replicas 0 --max-replicas 1 \
              --only-show-errors -o none
          else
            az containerapp update \
              -g "$RG" -n "$APP" \
              --image "$IMG" \
              --set-env-vars DB_HOST="$DBH" DB_PORT=3306 DB_NAME=contactforms DB_USER="$DBU" DB_PASS=secretref:db-pass \
              --secrets db-pass="$DBP" \
              --only-show-errors -o none
          fi

      - name: Show outputs
        run: |
          APP_FQDN=$(az containerapp show -g ${{ github.event.inputs.rg }} -n mead-app --query "properties.configuration.ingress.fqdn" -o tsv)
          MYSQL_FQDN=$(az mysql flexible-server show -g ${{ github.event.inputs.rg }} -n mead-mysql --query fullyQualifiedDomainName -o tsv)
          echo "App: https://${APP_FQDN}"
          echo "DB:  ${MYSQL_FQDN}"
          {
            echo "### Deployment outputs"
            echo ""
            echo "- **App**: https://${APP_FQDN}"
            echo "- **DB**:  ${MYSQL_FQDN}"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Optional: stop MySQL (save cost)
        if: ${{ github.event.inputs.stopMysql == 'true' }}
        run: az mysql flexible-server stop -g ${{ github.event.inputs.rg }} -n mead-mysql --only-show-errors -o none

      - name: Optional: delete RG (clean up everything)
        if: ${{ github.event.inputs.cleanup == 'true' }}
        run: az group delete -n ${{ github.event.inputs.rg }} --yes --no-wait
